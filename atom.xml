<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Krzysztof Zalewski]]></title>
  <link href="http://zlw.github.io/atom.xml" rel="self"/>
  <link href="http://zlw.github.io/"/>
  <updated>2014-01-16T17:04:20+01:00</updated>
  <id>http://zlw.github.io/</id>
  <author>
    <name><![CDATA[Krzysztof Zalewski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails: Attr_accessor for HStore]]></title>
    <link href="http://zlw.github.io/blog/2012/06/09/rails-attr-accessor-for-hstore/"/>
    <updated>2012-06-09T16:27:00+02:00</updated>
    <id>http://zlw.github.io/blog/2012/06/09/rails-attr-accessor-for-hstore</id>
    <content type="html"><![CDATA[<p>HStore is great feature in PostgreSQL. It allows us to use &ldquo;mini-noSQL&rdquo; db in out pg table. Nice!</p>

<p>Rails4 will have this baked-in, but now we have to use great gem <a href="https://github.com/softa/activerecord-postgres-hstore">activerecord-postgres-hstore</a>.</p>

<p>The only problem is, that there&rsquo;s no accessor methods. Let&rsquo;s assume that our model (Product) need price and weight. We will have to write something like this:</p>

<figure class='code'><figcaption><span>product.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">price</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">&amp;&amp;</span> <span class="n">data</span><span class="o">[</span><span class="s1">&#39;price&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">price</span><span class="o">=</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span> <span class="o">||</span> <span class="p">{})</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">price</span><span class="p">:</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">weight</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">&amp;&amp;</span> <span class="n">data</span><span class="o">[</span><span class="s1">&#39;weight&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">weight</span><span class="o">=</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span> <span class="o">||</span> <span class="p">{})</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">weight</span><span class="p">:</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of repetition. Definetly not DRY. We could use some metaprogramming and create this:</p>

<figure class='code'><figcaption><span>product.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="o">[</span><span class="ss">:price</span><span class="p">,</span> <span class="ss">:weight</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="n">e</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">&amp;&amp;</span> <span class="n">data</span><span class="o">[</span><span class="n">e</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">define_method</span> <span class="ss">:&quot;</span><span class="si">#{</span><span class="n">e</span><span class="si">}</span><span class="ss">=&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span> <span class="o">||</span> <span class="p">{})</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">e</span> <span class="o">=&gt;</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice, a lot cleaner. But maybe extract this so we could use it anywhere?</p>

<figure class='code'><figcaption><span>hstore_accessor.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">HstoreAccessor</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="c1"># Define accessors method for HStore field</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># @param [Symbol] hstore name of HStore field</span>
</span><span class='line'>    <span class="c1"># @param [Array] fields list of accessors methods to define</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">hstore_accessor</span><span class="p">(</span><span class="n">hstore</span><span class="p">,</span> <span class="o">*</span><span class="n">fields</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fields</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">field</span><span class="o">|</span>
</span><span class='line'>        <span class="n">define_hstore_reader</span> <span class="n">hstore</span><span class="p">,</span> <span class="n">field</span>
</span><span class='line'>        <span class="n">define_hstore_writer</span> <span class="n">hstore</span><span class="p">,</span> <span class="n">field</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">define_hstore_reader</span><span class="p">(</span><span class="n">hstore</span><span class="p">,</span> <span class="n">field</span><span class="p">)</span>
</span><span class='line'>      <span class="n">define_method</span> <span class="n">field</span> <span class="k">do</span>
</span><span class='line'>        <span class="nb">send</span><span class="p">(</span><span class="n">hstore</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">send</span><span class="p">(</span><span class="n">hstore</span><span class="p">)</span><span class="o">[</span><span class="n">field</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">define_hstore_writer</span><span class="p">(</span><span class="n">hstore</span><span class="p">,</span> <span class="n">field</span><span class="p">)</span>
</span><span class='line'>      <span class="n">define_method</span> <span class="ss">:&quot;</span><span class="si">#{</span><span class="n">field</span><span class="si">}</span><span class="ss">=&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span>
</span><span class='line'>        <span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="nb">send</span><span class="p">(</span><span class="n">hstore</span><span class="p">)</span> <span class="o">||</span> <span class="p">{})</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">field</span> <span class="o">=&gt;</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">send</span><span class="p">(</span><span class="ss">:&quot;</span><span class="si">#{</span><span class="n">hstore</span><span class="si">}</span><span class="ss">=&quot;</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can do this:</p>

<figure class='code'><figcaption><span>product.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">HstoreAccessor</span>
</span><span class='line'>  <span class="n">hstore_accessor</span> <span class="ss">:data</span><span class="p">,</span> <span class="ss">:price</span><span class="p">,</span> <span class="ss">:weight</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Usage</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">price</span> <span class="o">=</span> <span class="s1">&#39;$45&#39;</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">price</span> <span class="c1">#=&gt; $45</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">weight</span> <span class="o">=</span> <span class="s1">&#39;100kg&#39;</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">weight</span> <span class="c1">#=&gt; 100kg</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Is Bad Ass Rock Star Tech]]></title>
    <link href="http://zlw.github.io/blog/2012/03/11/node-dot-js-is-bad-ass-rock-star-tech/"/>
    <updated>2012-03-11T01:29:00+01:00</updated>
    <id>http://zlw.github.io/blog/2012/03/11/node-dot-js-is-bad-ass-rock-star-tech</id>
    <content type="html"><![CDATA[<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/bzkRVzciAZg "></iframe></div>


<p>Love this :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tommorow Night Theme]]></title>
    <link href="http://zlw.github.io/blog/2012/03/10/tommorow-night-theme/"/>
    <updated>2012-03-10T14:59:00+01:00</updated>
    <id>http://zlw.github.io/blog/2012/03/10/tommorow-night-theme</id>
    <content type="html"><![CDATA[<p>There is great theme called Tommorow Night. It&rsquo;s brought for many text editors and IDEs. I use it in RubyMine.
Unfortunatelly it&rsquo;s not really up-to-date. HAML, SASS or CoffeeScript support is broken. That&rsquo;s why I created modified version.</p>

<p>You can download it and install like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/Library/Preferences/RubyMine40/colors
</span><span class='line'><span class="nv">$ </span>wget https://raw.github.com/gist/2011486/TommorowNight.xml
</span></code></pre></td></tr></table></div></figure>


<p>Get original Tommorow Theme from <a href="https://github.com/chriskempson/Tomorrow-Theme/tree/master/Jetbrains">here</a></p>

<h2>Some examples</h2>

<h3>Ruby</h3>

<p><img src="http://dl.dropbox.com/u/1731162/zlw.github.com/rubymine-tommorow-night/ruby.png"></p>

<h3>HAML</h3>

<p><img src="http://dl.dropbox.com/u/1731162/zlw.github.com/rubymine-tommorow-night/haml.png"></p>

<h3>SASS</h3>

<p><img src="http://dl.dropbox.com/u/1731162/zlw.github.com/rubymine-tommorow-night/sass.png"></p>

<p>I need to check how this color scheme looks like with Python and Django and make some changes if needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyist Wallpaper]]></title>
    <link href="http://zlw.github.io/blog/2012/03/01/rubyist-wallpaper/"/>
    <updated>2012-03-01T14:08:00+01:00</updated>
    <id>http://zlw.github.io/blog/2012/03/01/rubyist-wallpaper</id>
    <content type="html"><![CDATA[<p>It&rsquo;s another post from <em>&ldquo;<a href="http://localhost:4000/blog/categories/wallpaper/">Wallpaper</a>&rdquo;</em> series. This time, there is wallpaper especially for
Rubyist (if someone does not know, this is common expression for Ruby programmer).</p>

<h2>Wallpaper</h2>

<p><img src="http://dl.dropbox.com/u/1731162/zlw.github.com/images/wallpapers/ruby_green.png"></p>

<p>It&rsquo;s modified (by me, <code>the worst Photoshop user in the world</code> &trade;) version of this:</p>

<p><img src="http://dl.dropbox.com/u/1731162/zlw.github.com/images/wallpapers/ruby_green_original.png"></p>

<h2>Desktop</h2>

<p><img src="http://dl.dropbox.com/u/1731162/zlw.github.com/images/wallpapers/desktops/ruby_green.png"></p>

<p>I&rsquo;m thinking about whole series with different programming languages logos &ndash;
Scala, Clojure, Erlang, Haskell, Python etc. (yes, that&rsquo;s <strong>the list</strong> of languages I like and/or want to learn)</p>

<p>But again, I&rsquo;m <code>the worst Photoshop user in the world</code> &trade;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Param_protected Cuts Out Important Attributes]]></title>
    <link href="http://zlw.github.io/blog/2012/02/29/param-protected-cuts-out-important-attributes/"/>
    <updated>2012-02-29T14:22:00+01:00</updated>
    <id>http://zlw.github.io/blog/2012/02/29/param-protected-cuts-out-important-attributes</id>
    <content type="html"><![CDATA[<p>I am huge fan of <a href="https://github.com/cjbottaro/param_protected">param_protected</a>
which I use instead of <a href="http://api.rubyonrails.org/classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_accessible">attr_accessible</a>/<a href="http://api.rubyonrails.org/classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_protected">attr_protected</a>.</p>

<p>I think it&rsquo;s not model thing to allow or deny attributes. Ok, maybe in case of User model I would protect it in controller and model too.</p>

<p>Anyway, it turns out that param_protected cuts out some really important parameters &ndash; like <code>action</code> or <code>commit</code>.</p>

<p>It is super easy to fix, but unfortunately it&rsquo;s not mentioned in documentation. So, let&rsquo;s add out parameters whitelist.</p>

<figure class='code'><figcaption><span>application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">param_accessible</span> <span class="o">[</span><span class="ss">:controller</span><span class="p">,</span> <span class="ss">:action</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:utf8</span><span class="p">,</span> <span class="ss">:commit</span><span class="o">]</span>
</span><span class='line'>  <span class="n">param_accessible</span> <span class="o">[</span><span class="ss">:authenticity_token</span><span class="o">]</span> <span class="c1"># this is for Devise</span>
</span><span class='line'>  <span class="n">param_accessible</span> <span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="ss">:index</span> <span class="c1"># this is for will_paginate/kaminari</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>controller</code>, <code>action</code> and <code>id</code> are self-explanatory. <code>utf8</code> and <code>commit</code> are used by Rails forms</p>

<p>I added some additional attributes:</p>

<ul>
<li><code>authenticity_token</code> which is used by Devise (maybe some other auth gems too)</li>
<li><code>page</code> which is used by will_paginate/kaminari</li>
</ul>


<p><code>page</code> is allowed only on <code>index</code> action, because that&rsquo;s where pagination is used</p>

<hr />

<p>This post is rewrite of <em>&ldquo;<a href="http://kzalewski.blogspot.com/2012/01/paramprotected-wycina-potrzebne.html">param_protected wycina potrzebne parametry</a>&rdquo;</em>
from my previous blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome Wallpaper]]></title>
    <link href="http://zlw.github.io/blog/2012/02/29/awesome-wallpaper/"/>
    <updated>2012-02-29T12:54:00+01:00</updated>
    <id>http://zlw.github.io/blog/2012/02/29/awesome-wallpaper</id>
    <content type="html"><![CDATA[<p>I came from Linux to Mac about 4-5 months ago. As you might know, in Linux you can change almost everything.
Apple don&rsquo;t go that way with Macs. You take it <em>&ldquo;as is&rdquo;</em> and everything you can <strong>easily</strong> change in GUI is wallpaper.
Oh, okay, you can move Dock to the left or right side of the screen ;)</p>

<p>That&rsquo;s why I am crazy about wallpapers, just like I was about changing GUI on Linux.
So, you can like it or not, I will post some awesome wallpaper from time to time.</p>

<h2>Wallpaper</h2>

<p><img src="http://dl.dropbox.com/u/1731162/zlw.github.com/images/wallpapers/abstract.jpg"></p>

<h2>Desktop</h2>

<p><img src="http://dl.dropbox.com/u/1731162/zlw.github.com/images/wallpapers/desktops/abstract.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Proper Test Named Scopes]]></title>
    <link href="http://zlw.github.io/blog/2012/02/28/how-to-proper-test-named-scopes/"/>
    <updated>2012-02-28T20:18:00+01:00</updated>
    <id>http://zlw.github.io/blog/2012/02/28/how-to-proper-test-named-scopes</id>
    <content type="html"><![CDATA[<p>I just read few posts about <em>&ldquo;how to test named scopes&rdquo;</em>. It was tons of bullshit.
I am asking &ndash; why should I use FactoryGirl or raw models and create a lot of unnecessary stuff (objects, db rows etc.) just to test <code>order(:position).first</code>?!</p>

<p>But first, let&rsquo;s create <code>Post</code> model. Just an example for this note.</p>

<figure class='code'><figcaption><span>post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">recent</span>
</span><span class='line'>    <span class="n">order</span><span class="p">(</span><span class="s1">&#39;created_at DESC&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">for_user</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, there are 2 simple scopes. I am not huge fan of Rails&rsquo;s named scopes &ndash; I use plain old class methods instead.</p>

<h2>How not to do this</h2>

<figure class='code'><figcaption><span>post_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;#recent&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should return most recent post&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">_</span><span class="p">,</span> <span class="n">post</span> <span class="o">=</span> <span class="o">[</span><span class="no">Factory</span><span class="p">(</span><span class="ss">:post</span><span class="p">),</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">recent</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">post</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;#for_user&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should return only posts created by given user&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">post1</span><span class="p">,</span> <span class="n">post2</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="o">[</span><span class="no">Factory</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="mi">1</span><span class="p">),</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="mi">1</span><span class="p">),</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="n">user_id</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">for_user</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="n">post1</span><span class="p">,</span> <span class="n">post2</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve just created .. let&rsquo;s count .. 5 objects and made 2 unnecessary db queries.</p>

<h2>How to do this</h2>

<figure class='code'><figcaption><span>post_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;#recent&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should return most recent post&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">post</span> <span class="o">=</span> <span class="n">mock_model</span> <span class="no">Post</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:order</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s1">&#39;created_at DESC&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span> <span class="n">post</span>
</span><span class='line'>      <span class="n">post</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:first</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span> <span class="n">post</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">recent</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;#for_user&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should return only posts created by given user&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">post</span> <span class="o">=</span> <span class="n">mock_model</span> <span class="no">Post</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:where</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">for_user</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think it&rsquo;s useless to test Rails&rsquo;s elements (like <code>where</code> or <code>order</code>). Rails is really proper tested.
Instead we should spec <strong>messages</strong> between object and passed <strong>parameters</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World on New Blog]]></title>
    <link href="http://zlw.github.io/blog/2012/02/28/hello-world-on-new-blog/"/>
    <updated>2012-02-28T20:14:00+01:00</updated>
    <id>http://zlw.github.io/blog/2012/02/28/hello-world-on-new-blog</id>
    <content type="html"><![CDATA[<h2>Hello World!</h2>

<p>This is my.. (counting) .. 4th or 5th weblog. I tried wordpress, blogger, tumblr and many others.
But as every hacker knows, writing in markdown is much better than shitty WYSIWYG editors.</p>

<p>Plus, you know, having blog on <strong>GitHub Pages(!)</strong>, with <strong>Octopress(!)</strong>, written on a <strong>MacBook Pro(!)</strong> ?! .. WOOOW!
That is so hipster that I could not resist!</p>

<p><img src="http://dl.dropbox.com/u/1731162/zlw.github.com/images/hipster_coffeeshop.jpeg"></p>

<h2>What it is going to be about</h2>

<p>You know, hacker stuff :)</p>

<p>Mostly <strong>Ruby</strong> and <strong>Ruby on Rails</strong> and stuff <em>around</em> &ndash; gems, testing etc.</p>

<p>But of course not always. Sometime maybe I&rsquo;ll write about <strong>JavaScript</strong> (I&rsquo;m still trying to learn Ember.js and Backbone.js),
<strong>Apple/Mac</strong> (<em>&ldquo;wow, look at this great app!&rdquo;</em> etc.), <strong>Python</strong> and <strong>Django</strong> (I&rsquo;ve been really into it about year ago).</p>

<p>I am still thinkig about my previous blog &ndash; should I move posts here from there? Has not yet decided.
Meantime, if you want to read it: <a href="http://kzalewski.blogspot.com/">KrzysztofZalewski::Blog@Blogspot</a>. Oh, yes, it is in Polish.</p>

<p>So, see you next time!</p>
]]></content>
  </entry>
  
</feed>
