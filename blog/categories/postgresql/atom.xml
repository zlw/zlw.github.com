<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PostgreSQL | Krzysztof Zalewski]]></title>
  <link href="http://zlw.github.io/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://zlw.github.io/"/>
  <updated>2014-01-16T17:04:20+01:00</updated>
  <id>http://zlw.github.io/</id>
  <author>
    <name><![CDATA[Krzysztof Zalewski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails: Attr_accessor for HStore]]></title>
    <link href="http://zlw.github.io/blog/2012/06/09/rails-attr-accessor-for-hstore/"/>
    <updated>2012-06-09T16:27:00+02:00</updated>
    <id>http://zlw.github.io/blog/2012/06/09/rails-attr-accessor-for-hstore</id>
    <content type="html"><![CDATA[<p>HStore is great feature in PostgreSQL. It allows us to use &ldquo;mini-noSQL&rdquo; db in out pg table. Nice!</p>

<p>Rails4 will have this baked-in, but now we have to use great gem <a href="https://github.com/softa/activerecord-postgres-hstore">activerecord-postgres-hstore</a>.</p>

<p>The only problem is, that there&rsquo;s no accessor methods. Let&rsquo;s assume that our model (Product) need price and weight. We will have to write something like this:</p>

<p>``` ruby product.rb
class Product &lt; ActiveRecord::Base
  def price</p>

<pre><code>data &amp;&amp; data['price']
</code></pre>

<p>  end</p>

<p>  def price=(val)</p>

<pre><code>self.data = (data || {}).merge(price: val)
</code></pre>

<p>  end</p>

<p>  def weight</p>

<pre><code>data &amp;&amp; data['weight']
</code></pre>

<p>  end</p>

<p>  def weight=(val)</p>

<pre><code>self.data = (data || {}).merge(weight: val)
</code></pre>

<p>  end
end
```</p>

<p>A lot of repetition. Definetly not DRY. We could use some metaprogramming and create this:</p>

<p>```ruby product.rb
class Product &lt; ActiveRecord::Base
  [:price, :weight].each do |e|</p>

<pre><code>define_method e do
  data &amp;&amp; data[e.to_s]
end

define_method :"#{e}=" do |val|
  self.data = (data || {}).merge(e =&gt; val)
end
</code></pre>

<p>  end
end
```</p>

<p>Nice, a lot cleaner. But maybe extract this so we could use it anywhere?</p>

<p>```ruby hstore_accessor.rb
module HstoreAccessor
  extend ActiveSupport::Concern</p>

<p>  module ClassMethods</p>

<pre><code># Define accessors method for HStore field
#
# @param [Symbol] hstore name of HStore field
# @param [Array] fields list of accessors methods to define
def hstore_accessor(hstore, *fields)
  fields.each do |field|
    define_hstore_reader hstore, field
    define_hstore_writer hstore, field
  end
end


private

def define_hstore_reader(hstore, field)
  define_method field do
    send(hstore) &amp;&amp; send(hstore)[field]
  end
end

def define_hstore_writer(hstore, field)
  define_method :"#{field}=" do |val|
    val = (send(hstore) || {}).merge(field =&gt; val)
    send(:"#{hstore}=", val)
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Now we can do this:</p>

<p><code>ruby product.rb
class Product &lt; ActiveRecord::Base
  include HstoreAccessor
  hstore_accessor :data, :price, :weight
end
</code></p>

<p>```ruby Usage
p = Product.new</p>

<p>p.price = &lsquo;$45&rsquo;
p.price #=> $45</p>

<p>p.weight = &lsquo;100kg&rsquo;
p.weight #=> 100kg
```</p>
]]></content>
  </entry>
  
</feed>
